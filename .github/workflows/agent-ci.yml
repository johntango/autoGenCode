name: agent-ci

on:
  pull_request:
    branches: ["main"]
    paths:
      - "generated/**"
      - ".github/workflows/agent-ci.yml"
  workflow_dispatch:
    inputs:
      task:
        description: "Optional: comma-separated <taskId>(s) (e.g., abc,def)"
        required: false
        type: string
      max-tests:
        description: "Number of tests per task (0 or empty = all)"
        required: false
        type: string
        default: "0"

permissions:
  contents: read
  pull-requests: read

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      tasks: ${{ steps.discover.outputs.tasks }}
    steps:
      - uses: actions/github-script@v7
        id: discover
        with:
          script: |
            let tasks = [];
            if (context.eventName === 'workflow_dispatch') {
              const raw = core.getInput('task') || '';
              tasks = raw.split(',').map(s => s.trim()).filter(Boolean);
            } else {
              const { owner, repo } = context.repo;
              const prNumber = context.payload.pull_request?.number;
              const perPage = 100;
              const set = new Set();
              let page = 1;
              while (prNumber) {
                const { data } = await github.rest.pulls.listFiles({
                  owner, repo, pull_number: prNumber, per_page: perPage, page
                });
                for (const f of data) {
                  const m = /^generated\/([^/]+)\//.exec(f.filename);
                  if (m) set.add(m[1]);
                }
                if (data.length < perPage) break;
                page++;
              }
              tasks = Array.from(set);
            }
            core.info(`Discovered tasks: ${JSON.stringify(tasks)}`);
            core.setOutput('tasks', JSON.stringify(tasks));

  test:
    needs: discover
    if: ${{ fromJson(needs.discover.outputs.tasks).length > 0 }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        task: ${{ fromJson(needs.discover.outputs.tasks) }}
    env:
      MAX_TESTS: ${{ (github.event_name == 'workflow_dispatch' && inputs['max-tests']) || vars.MAX_TESTS || '0' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --- Diagnostics to prove the paths exist in the checked-out tree ---
      - name: Debug – repo root tree (top level)
        run: |
          echo "PWD=$PWD"
          ls -la
          echo "Listing generated/${{ matrix.task }}"
          ls -la "generated/${{ matrix.task }}" || true
          echo "Tree under generated/${{ matrix.task }}"
          find "generated/${{ matrix.task }}" -maxdepth 2 -type d -print 2>/dev/null || true

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install base deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f test-requirements.txt ]; then pip install -r test-requirements.txt; fi
          pip install pytest

      # Work from inside generated/<taskId> to avoid any path ambiguity
      - name: Per-task optional deps
        working-directory: generated/${{ matrix.task }}
        run: |
          set -euo pipefail
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f tests/requirements.txt ]; then pip install -r tests/requirements.txt; fi

      - name: Run tests for ${{ matrix.task }}
        working-directory: generated/${{ matrix.task }}
        env:
          MAX_TESTS: ${{ env.MAX_TESTS }}
        run: |
          set -euo pipefail

          if [ ! -d "src" ] || [ ! -d "tests" ]; then
            echo "Skipping $(pwd) (missing src/ or tests/)."
            exit 0
          fi

          export PYTHONPATH="src${PYTHONPATH:+:$PYTHONPATH}"

          N="${MAX_TESTS:-0}"
          # If N is not a positive integer, run all tests
          if ! [[ "$N" =~ ^[0-9]+$ ]] || [ "$N" -le 0 ]; then
            echo "Running ALL tests in $(pwd)"
            pytest -q --junitxml "ci-results.xml" "tests"
            exit 0
          fi

          echo "Collecting up to $N test node(s)…"
          # Use -q --collect-only to get nodeids, keep only lines containing ::, cap to N
          mapfile -t NODEIDS < <(pytest --collect-only -q "tests" 2>/dev/null | sed -n '/::/p' | head -n "$N")

          if [ "${#NODEIDS[@]}" -eq 0 ]; then
            echo "No tests collected under $(pwd)/tests."
            exit 0
          fi

          printf 'Running %s test node(s):\n' "${#NODEIDS[@]}"
          printf '  %s\n' "${NODEIDS[@]}"

          pytest -q --junitxml "ci-results.xml" "${NODEIDS[@]}"

      - name: Upload JUnit report for ${{ matrix.task }}
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.task }}
          path: generated/${{ matrix.task }}/ci-results.xml
          if-no-files-found: ignore

