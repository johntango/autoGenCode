name: agent-ci

on:
  pull_request:
    branches: ["main"]
    paths:
      - "generated/**"
      - ".github/workflows/agent-ci.yml"
  workflow_dispatch:
    inputs:
      task:
        description: "Optional: comma-separated <taskId>(s) (e.g., abc,def)"
        required: false
        type: string
      max-tests:
        description: "Number of tests per task (0 or empty = all)"
        required: false
        type: string
        default: "0"

# Ensure the PR files API is readable even on more restrictive org defaults
permissions:
  contents: read
  pull-requests: read

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      tasks: ${{ steps.discover.outputs.tasks }}
    steps:
      - uses: actions/github-script@v7
        id: discover
        with:
          # GITHUB_TOKEN is provided by default; you can pass it explicitly if your org requires:
          # github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            /**
             * Produces a JSON array of <taskId> strings, e.g. ["task123","task456"].
             */
            let tasks = [];
            if (context.eventName === 'workflow_dispatch') {
              const raw = core.getInput('task') || '';
              tasks = raw.split(',').map(s => s.trim()).filter(Boolean);
            } else {
              const { owner, repo } = context.repo;
              const prNumber = context.payload.pull_request?.number;
              if (!prNumber) {
                core.info('No PR number found on this event; emitting empty task list.');
              } else {
                const perPage = 100;
                const set = new Set();
                let page = 1;
                while (true) {
                  const { data } = await github.rest.pulls.listFiles({
                    owner, repo, pull_number: prNumber, per_page: perPage, page
                  });
                  for (const f of data) {
                    // Match generated/<taskId>/...
                    const m = /^generated\/([^/]+)\//.exec(f.filename);
                    if (m) set.add(m[1]);
                  }
                  if (data.length < perPage) break;
                  page++;
                }
                tasks = Array.from(set);
              }
            }
            core.info(`Discovered tasks: ${JSON.stringify(tasks)}`);
            core.setOutput('tasks', JSON.stringify(tasks));

  test:
    needs: discover
    # Use explicit length check; do not use the array itself as a boolean
    if: ${{ fromJson(needs.discover.outputs.tasks).length > 0 }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        task: ${{ fromJson(needs.discover.outputs.tasks) }}
    env:
      # Prefer manual input; else repository variable MAX_TESTS; else "0" (meaning "all")
      MAX_TESTS: ${{ (github.event_name == 'workflow_dispatch' && inputs['max-tests']) || vars.MAX_TESTS || '0' }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install base deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f test-requirements.txt ]; then pip install -r test-requirements.txt; fi
          pip install pytest

      - name: Per-task optional deps
        run: |
          set -euo pipefail
          TASK="generated/${{ matrix.task }}"
          if [ -f "$TASK/requirements.txt" ]; then pip install -r "$TASK/requirements.txt"; fi
          if [ -f "$TASK/tests/requirements.txt" ]; then pip install -r "$TASK/tests/requirements.txt"; fi

      - name: Run up to ${{ env.MAX_TESTS }} test(s) for ${{ matrix.task }}
        run: |
          set -euo pipefail
          TASK="generated/${{ matrix.task }}"
          if [ ! -d "$TASK/src" ] || [ ! -d "$TASK/tests" ]; then
            echo "Skipping $TASK (missing src/ or tests/)."
            exit 0
          fi

          export PYTHONPATH="$TASK/src${PYTHONPATH:+:$PYTHONPATH}"

          N="${MAX_TESTS:-0}"
          # Treat empty/zero/negative/non-integer as "all"
          if [[ -z "$N" || "$N" == "0" || "$N" == "all" || ! "$N" =~ ^[0-9]+$ || "$N" -le 0 ]]; then
            echo "Running ALL tests for $TASK"
            pytest -q --junitxml "$TASK/ci-results.xml" "$TASK/tests"
            exit 0
          fi

          # Collect node IDs and cap to N
          mapfile -t NODEIDS < <(pytest --collect-only -q "$TASK/tests" 2>/dev/null | sed '/::/!d' | head -n "$N")

          if [ "${#NODEIDS[@]}" -eq 0 ]; then
            echo "No tests collected."
            exit 0
          fi

          echo "Running ${#NODEIDS[@]} test(s):"
          printf '  %s\n' "${NODEIDS[@]}"

          pytest -q --junitxml "$TASK/ci-results.xml" "${NODEIDS[@]}"

      - name: Upload JUnit report for ${{ matrix.task }}
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.task }}
          path: generated/${{ matrix.task }}/ci-results.xml
          if-no-files-found: ignore