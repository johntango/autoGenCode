name: agent-ci

on:
  pull_request:
    branches: ["main"]
    paths:
      - "generated/**"
      - ".github/workflows/agent-ci.yml"
  workflow_dispatch:
    inputs:
      task:
        description: "Optional: comma-separated <taskId>(s) (e.g., abc,def). If empty, runs none."
        required: false
        type: string

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      tasks: ${{ steps.discover.outputs.tasks }}
    steps:
      - uses: actions/github-script@v7
        id: discover
        with:
          script: |
            let tasks = [];
            if (context.eventName === 'workflow_dispatch') {
              const raw = core.getInput('task') || '';
              tasks = raw.split(',').map(s => s.trim()).filter(Boolean);
            } else {
              const { owner, repo } = context.repo;
              const prNumber = context.payload.pull_request.number;
              const perPage = 100;
              const set = new Set();
              let page = 1;
              while (true) {
                const { data } = await github.rest.pulls.listFiles({
                  owner, repo, pull_number: prNumber, per_page: perPage, page
                });
                for (const f of data) {
                  const m = /^generated\/([^/]+)\//.exec(f.filename);
                  if (m) set.add(m[1]);
                }
                if (data.length < perPage) break;
                page++;
              }
              tasks = Array.from(set);
            }
            core.info(`Tasks: ${JSON.stringify(tasks)}`);
            core.setOutput('tasks', JSON.stringify(tasks));

  test:
    needs: discover
    if: ${{ fromJson(needs.discover.outputs.tasks) && fromJson(needs.discover.outputs.tasks).length > 0 }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        task: ${{ fromJson(needs.discover.outputs.tasks) }}
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # NOTE: no cache: pip (to avoid 'No file matched ...requirements.txt' error)
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f test-requirements.txt ]; then pip install -r test-requirements.txt; fi
          pip install pytest

      - name: (Per-task) optional deps
        run: |
          set -euo pipefail
          TASK="generated/${{ matrix.task }}"
          if [ -f "$TASK/requirements.txt" ]; then pip install -r "$TASK/requirements.txt"; fi
          if [ -f "$TASK/tests/requirements.txt" ]; then pip install -r "$TASK/tests/requirements.txt"; fi

      - name: Run at most 2 tests for task ${{ matrix.task }}
        run: |
          set -euo pipefail
          shopt -s nullglob
          TASK="generated/${{ matrix.task }}"
          if [ ! -d "$TASK/src" ] || [ ! -d "$TASK/tests" ]; then
            echo "Skipping $TASK (missing src/ or tests/)."
            exit 0
          fi

          export PYTHONPATH="$TASK/src${PYTHONPATH:+:$PYTHONPATH}"

          # Collect pytest node IDs and keep only the first 2
          mapfile -t NODEIDS < <(pytest --collect-only -q "$TASK/tests" 2>/dev/null | sed '/::/!d' | head -n 2)

          if [ "${#NODEIDS[@]}" -eq 0 ]; then
            echo "No tests collected."
            exit 0
          fi

          echo "Running ${#NODEIDS[@]} test(s):"
          printf '  %s\n' "${NODEIDS[@]}"

          # Write JUnit XML so the orchestrator can learn from failures
          pytest -q --junitxml "$TASK/ci-results.xml" "${NODEIDS[@]}"

      - name: Upload JUnit report for ${{ matrix.task }}
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.task }}
          path: generated/${{ matrix.task }}/ci-results.xml
          if-no-files-found: ignore

